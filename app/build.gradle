apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.shiftleft.gather-dependencies'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.insecureshop"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'net.gotev:uploadservice:3.2.3'


}

// -------------------- BEGIN EXAMPLE GRADLE TASK FOR GATHERING DEPENDENCIES
tasks.register('gatherDeps_fromAndroidVariant', Copy) {
  def variantName = 'release'
  def outputDirectory = rootProject.buildDir.getAbsolutePath() + '/gatheredDependencies'
  def availableVariants = android.applicationVariants.findAll()
  def variant = availableVariants.find { it.name == variantName }
  if (variant == null) {
    throw new GradleException("Variant with name `$variantName` not found. Available variants: ${availableVariants.collect{ it.name }}")
  }
  def filesFromVariant = variant.getCompileClasspath(null).files
  filesFromVariant.each { file ->
    duplicatesStrategy = 'include'
    from file
    into outputDirectory
  }
}

tasks.register('gatherDeps_fromAndroidApis', Copy) {
  def outputDirectory = rootProject.buildDir.getAbsolutePath() + '/gatheredDependencies'
  def configurationName = 'androidApis'
  def availableConfigurations = project.configurations.findAll()
  def androidApisConfiguration = availableConfigurations.find { it.name == configurationName }
  if (androidApisConfiguration == null) {
    throw new GradleException("Configuration with name `$configurationName` not found. Available configurations: ${availableConfigurations.collect { it.name }}")
  }
  duplicatesStrategy = 'include'
  from androidApisConfiguration
  into outputDirectory
}

tasks.register('gatherDeps', Copy) {
  dependsOn('gatherDeps_fromAndroidVariant')
  dependsOn('gatherDeps_fromAndroidApis')
}
// -------------------- END EXAMPLE GRADLE TASK FOR GATHERING DEPENDENCIES
